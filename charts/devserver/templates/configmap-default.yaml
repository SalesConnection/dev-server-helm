apiVersion: v1
kind: ConfigMap
metadata:
  name: default-files
  labels:
    name: default-files
data:
  {{- range .Values.users }}
  init-{{ .name }}.sh: |-
    #!/bin/bash
    echo "Running init script"
    directory="/root/.ssh"
    mkdir -p /root/.ssh
    echo "creating .ssh dir"
    # if [ ! -d "$directory" ]; then
    # else
    #     echo "Directory $directory already exists. Nothing to do."
    # fi

    cat /var/keys/{{ .name }}.pub > /root/.ssh/authorized_keys
    echo -e "Host git-codecommit.*.amazonaws.com\n User {{ .codecommit | default "empty" }}" > /root/.ssh/config

    if [ ! -f /root/.profile ]; then
      echo "Copying .profile"
      cp /var/default_files/.profile /root/.profile
    fi

    if [ ! -f /root/.bashrc ]; then
      echo "Copying .bashrc"
      cp /var/default_files/.bashrc /root/.bashrc
    fi

    rm -f /root/.k8s_env
    echo "Copying .k8s_env"
    cp /var/default_files/.k8s_env /root/.k8s_env

    if [ ! -f /root/clone.sh ]; then
      echo "Copying clone.sh"
      cp /var/default_files/clone.sh /root/clone.sh
      chmod u+x /root/clone.sh
    fi
    ls -la /root
    ls -la /root/.ssh
  {{- end }}
  clone.sh: |-
    #!/bin/bash
    directory="/root/sc"
    echo "creating sc dir"
    if [ ! -d "$directory" ]; then
      mkdir -p /root/sc
      cd /root/sc
      git clone -b live-k8s https://git-codecommit.ap-southeast-1.amazonaws.com/v1/repos/salesconnection-php7.4.4-laravel7.3 .
      cp .env.devserver .env
    else
        echo "Directory $directory already exists. Nothing to do."
    fi

    # install
    npm run login
    composer install --no-interaction
    npm install
    npm run dev

    mkdir -p /root/sc/uploads
    chmod ugo+rw -R uploads
    chmod ugo+rw -R vendor
    chmod ugo+rw -R public
    chmod ugo+rw -R storage
  .profile: |-
    # ~/.profile: executed by Bourne-compatible login shells.

    if [ "$BASH" ]; then
      if [ -f ~/.bashrc ]; then
        . ~/.bashrc
      fi
    fi

    mesg n 2> /dev/null || true
  .bashrc: |-
    # ~/.bashrc: executed by bash(1) for non-login shells.
    # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
    # for examples

    # If not running interactively, don't do anything
    [ -z "$PS1" ] && return

    # don't put duplicate lines in the history. See bash(1) for more options
    # ... or force ignoredups and ignorespace
    HISTCONTROL=ignoredups:ignorespace

    # append to the history file, don't overwrite it
    shopt -s histappend

    # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
    HISTSIZE=1000
    HISTFILESIZE=2000

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    # make less more friendly for non-text input files, see lesspipe(1)
    [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

    # set variable identifying the chroot you work in (used in the prompt below)
    if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
        debian_chroot=$(cat /etc/debian_chroot)
    fi

    # set a fancy prompt (non-color, unless we know we "want" color)
    case "$TERM" in
        xterm-color) color_prompt=yes;;
    esac

    # uncomment for a colored prompt, if the terminal has the capability; turned
    # off by default to not distract the user: the focus in a terminal window
    # should be on the output of commands, not on the prompt
    #force_color_prompt=yes

    if [ -n "$force_color_prompt" ]; then
        if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
      # We have color support; assume it's compliant with Ecma-48
      # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
      # a case would tend to support setf rather than setaf.)
      color_prompt=yes
        else
      color_prompt=
        fi
    fi

    if [ "$color_prompt" = yes ]; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
    esac

    # enable color support of ls and also add handy aliases
    if [ -x /usr/bin/dircolors ]; then
        test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
        alias ls='ls --color=auto'
        #alias dir='dir --color=auto'
        #alias vdir='vdir --color=auto'

        alias grep='grep --color=auto'
        alias fgrep='fgrep --color=auto'
        alias egrep='egrep --color=auto'
    fi

    # some more ls aliases
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'

    # Alias definitions.
    # You may want to put all your additions into a separate file like
    # ~/.bash_aliases, instead of adding them here directly.
    # See /usr/share/doc/bash-doc/examples in the bash-doc package.

    if [ -f ~/.bash_aliases ]; then
        . ~/.bash_aliases
    fi
    if [ -f ~/.k8s_env ]; then
        . ~/.k8s_env
    fi

    # enable programmable completion features (you don't need to enable
    # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
    # sources /etc/bash.bashrc).
    #if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    #    . /etc/bash_completion
    #fi

  .k8s_env: |-
    export AWS_DEFAULT_REGION=ap-southeast-1
    export AWS_REGION=ap-southeast-1
    export AWS_ROLE_ARN=arn:aws:iam::672944514151:role/sc-staging
    export AWS_STS_REGIONAL_ENDPOINTS=regional
    export AWS_WEB_IDENTITY_TOKEN_FILE=/var/run/secrets/eks.amazonaws.com/serviceaccount/token
    export COMPOSER_ALLOW_SUPERUSER=1

  nginx.conf: |-
    user root;
    worker_processes  auto;

    events {
      worker_connections  1024;
    }

    http {
      access_log    /dev/stdout;
      include       mime.types;
      default_type  application/octet-stream;
      gzip on;

      server {
        # we use port 80 here to work with our docker config but you can configure it to any port you want, just remember to update the dockerfile accordingly
        listen 80;
        client_max_body_size 40M;

        index index.php index.html;

          # your application here
        server_name app;

        error_log  /var/log/nginx/error.log;

        access_log /var/log/nginx/access.log;

        # this should be the path of your public folder in laravel which from our dockerfile it would be /var/www/public
        root /root/sc/public;

        location ~ \.php$ {
          try_files $uri =404;
          fastcgi_split_path_info ^(.+\.php)(/.+)$;
          fastcgi_pass 127.0.0.1:9000;
          fastcgi_index index.php;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
          fastcgi_buffering off;
        }

        location / {
          try_files $uri $uri/ /index.php?$query_string;
          gzip_static on;
        }

        location ~ /\.(?!well-known).* {
          deny all;
        }
      }
    }